import matplotlib.pyplot as plt
import numpy as np
from transp_code.transp_classes import FBM
from helpful_stuff import SimpleSignal
from helpful_stuff import *


def dick_notable():
	fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(nrows=2, ncols=2, sharex=True, figsize=(8, 5))
	clrs = plt.rcParams['axes.prop_cycle'].by_key()['color']
	leg_fs = 10  # fontsize for legend
	fs = leg_fs + 2
	xlab = '$E_{nbi}$ [keV]'
	vbev = np.arange(10, 21) * 1000.  # 10-20kV
	xplot = vbev / 1000.  # [kV]
	shots = [1036171601 + i for i in range(11)]  # P for perveance held constant, voltage scan
	perv = np.array([15.e-6] * len(shots))
	ib = perv * vbev ** 1.5  # A
	pb = ib * vbev  # W
	
	j_tot = pb * 7.e-3  # [J] tot put into plasma
	ax1.plot(xplot, [p / 1000. for p in pb])
	ax1.set_ylabel('Beam Power [kW]', fontsize=fs)
	bden_arr = np.array([])  # [num.e12/cm^3]
	bphto_arr = np.array([])  # [kW]
	bphto_arr2 = np.array([])  # [kW]
	bpshi_arr = np.array([])  # [J]
	bplim_arr = np.array([])  # [J]
	bpte_arr = np.array([])  # [J]
	bpti_arr = np.array([])  # [J]
	cxx_arr = np.array([])  # [J]
	cxi_arr = np.array([])  # [J]
	for shot in shots:
		print(f'shot: {shot}')
		bdens = SimpleSignal(shot, '\\bdens')  # [num/cm^3]
		bphto = SimpleSignal(shot, '\\bphto')  # [W]
		bpshi = SimpleSignal(shot, '\\bpshi')  # [W]
		bplim = SimpleSignal(shot, '\\bplim')  # [W]
		bpte = SimpleSignal(shot, '\\bpte')  # [W]
		bpti = SimpleSignal(shot, '\\bpti')  # [W]
		bpcxx = SimpleSignal(shot, '\\bpcxx')  # [W]
		bpcxi = SimpleSignal(shot, '\\bpcxi')  # [W]
		
		t_prespike = max(np.where(bpcxi.dim1 <= .473)[0])  # cut off cxi integration before spike at end of shot
		cxx_arr = np.append(cxx_arr, np.sum(bpcxx.data[1:] * (bpcxx.dim1[1:] - bpcxx.dim1[:-1])))
		cxi_arr = np.append(cxi_arr,
		                    np.sum(bpcxi.data[1:t_prespike] * (
				                    bpcxi.dim1[1:t_prespike] - bpcxi.dim1[:t_prespike - 1])))
		bpte_arr = np.append(bpte_arr, np.sum(bpte.data[1:] * (bpte.dim1[1:] - bpte.dim1[:-1])))
		bpti_arr = np.append(bpti_arr, np.sum(bpti.data[1:] * (bpti.dim1[1:] - bpti.dim1[:-1])))
		bpshi_arr = np.append(bpshi_arr, np.sum(bpshi.data[1:] * (bpshi.dim1[1:] - bpshi.dim1[:-1])))
		bplim_arr = np.append(bplim_arr, np.sum(bplim.data[1:] * (bplim.dim1[1:] - bplim.dim1[:-1])))
		bphto_arr2 = np.append(bphto_arr2, np.sum(bphto.data[1:] * (bphto.dim1[1:] - bphto.dim1[:-1])))
		bphto_arr = np.append(bphto_arr, max(bphto.data) / 1000.)
		bden_arr = np.append(bden_arr, max(bdens.data.flatten()) / 1.e12)
	ax2.yaxis.set_visible(False)
	ax2r = ax2.twinx()
	ax2r.plot(xplot, bphto_arr, 'o-', c=clrs[1])
	ax2r.set_ylabel('max(Beam Heating) [kW]', fontsize=fs)
	ax2r.set_ylim(ymin=0)
	
	ax3.plot(xplot, bpshi_arr / j_tot, 'o-', label='shine-through')
	ax3.plot(xplot, bplim_arr / j_tot, 'o-', label='orbit loss')
	ax3.plot(xplot, cxi_arr / j_tot, 'o-', label='cx int')
	ax3.plot(xplot, cxx_arr / j_tot, 'o-', label='cx ext')
	ax3.set_ylabel('Total Fraction', fontsize=fs)
	ax3.set_xlabel(xlab, fontsize=fs)
	ax3.legend(fontsize=leg_fs, loc='upper left')
	
	ax4.yaxis.set_visible(False)
	ax4r = ax4.twinx()
	ax4r.plot(xplot, bphto_arr2, 'o-', label='total')
	ax4r.plot(xplot, bpte_arr, 'o-', label='elec')
	ax4r.plot(xplot, bpti_arr, 'o-', label='ions')
	ax4.set_xlabel(xlab, fontsize=fs)
	ax4r.set_ylabel('Total Beam Heating [J]', fontsize=fs)
	ax4r.legend(fontsize=leg_fs)
	
	for ax in [ax1, ax2, ax2r, ax3, ax4, ax4r]:
		ax.tick_params(labelsize=fs)
	
	plt.tight_layout()
	plt.show()


def beam_scan():
	constant_power = 0
	constant_perveance = 1
	focal_length = 0
	divergence = 0
	
	fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(nrows=2, ncols=2, sharex=True, figsize=(12, 5))
	# shots = 1036171401 + i for i in range(11)]  # N for neutral density scan, constant voltage, power
	clrs = plt.rcParams['axes.prop_cycle'].by_key()['color']
	leg_fs = 10  # fontsize for legend
	fs = leg_fs + 2
	if constant_power:
		xlab = 'Ebeam [keV]'
		vbev = np.arange(10, 21) * 1000.  # 10-20kV
		xplot = vbev / 1000.  # [kV]
		shots = [1036172201 + i for i in range(11)]  # V for voltage scan, constant power
		pb = np.array([1.61e5] * len(shots))  # [W]
		ib = pb / vbev  # [A]
		perv = ib / vbev ** 1.5
	elif constant_perveance:
		xlab = 'Ebeam [keV]'
		vbev = np.arange(10, 21) * 1000.  # 10-20kV
		xplot = vbev / 1000.  # [kV]
		shots = [1036171601 + i for i in range(11)]  # P for perveance held constant, voltage scan
		perv = np.array([15.e-6] * len(shots))
		ib = perv * vbev ** 1.5  # A
		pb = ib * vbev  # W
	elif focal_length:
		xlab = 'Focal Length (cm)'
		foc = np.linspace(160, 200, endpoint=True, num=9)  # focal length (cm)
		shots = [1036170601 + i for i in range(9)]  # F for focal length varied
		xplot, pb, vb = foc, np.ones_like(foc) * 161.e3, np.ones_like(foc) * 10.7e3  # [cm], [W], [V]
		ib = pb / vb  # A
		perv = ib / vb ** 1.5
	elif divergence:
		xlab = 'Beam Divergence (rad)'
		div = np.linspace(.02, .1, endpoint=True, num=9)  # divergence (rad)
		shots = [1036170401 + i for i in range(9)]  # D for divergence varied
		xplot, pb, vb = div, np.ones_like(div) * 161.e3, np.ones_like(div) * 10.7e3  # [rad], [W], [V]
		ib = pb / vb  # A
		perv = ib / vb ** 1.5
	
	j_tot = pb * 7.e-3  # [J] tot put into plasma
	ax1.plot(xplot, perv * 1.e6, c=clrs[0])
	ax1.set_ylabel('Perveance [e-6]', c=clrs[0], fontsize=fs)
	
	ax1r = ax1.twinx()
	ax1rr = ax1.twinx()
	ax1r.spines["left"].set_position(("axes", -0.4))  # red one
	ax1rr.spines["left"].set_position(("axes", -0.2))  # green one
	make_patch_spines_invisible(ax1r)
	make_patch_spines_invisible(ax1rr)
	ax1r.spines["left"].set_visible(True)
	ax1r.yaxis.set_label_position('left')
	ax1r.yaxis.set_ticks_position('left')
	ax1rr.spines["left"].set_visible(True)
	ax1rr.yaxis.set_label_position('left')
	ax1rr.yaxis.set_ticks_position('left')
	
	ax1r.plot(xplot, [p / 1000. for p in pb], c=clrs[1])
	ax1r.set_ylabel('Beam Power [kW]', color=clrs[1], fontsize=fs)
	ax1rr.plot(xplot, ib, c=clrs[2])
	ax1rr.set_ylabel('Beam Current [A]', c=clrs[2], fontsize=fs)
	bden_arr = np.array([])  # [num.e12/cm^3]
	bphto_arr = np.array([])  # [kW]
	bphto_arr2 = np.array([])  # [kW]
	bpshi_arr = np.array([])  # [J]
	bplim_arr = np.array([])  # [J]
	bpte_arr = np.array([])  # [J]
	bpti_arr = np.array([])  # [J]
	cxx_arr = np.array([])  # [J]
	cxi_arr = np.array([])  # [J]
	for shot in shots:
		print(f'shot: {shot}')
		bdens = SimpleSignal(shot, '\\bdens')  # [num/cm^3]
		bphto = SimpleSignal(shot, '\\bphto')  # [W]
		bpshi = SimpleSignal(shot, '\\bpshi')  # [W]
		bplim = SimpleSignal(shot, '\\bplim')  # [W]
		bpte = SimpleSignal(shot, '\\bpte')  # [W]
		bpti = SimpleSignal(shot, '\\bpti')  # [W]
		bpcxx = SimpleSignal(shot, '\\bpcxx')  # [W]
		bpcxi = SimpleSignal(shot, '\\bpcxi')  # [W]
		
		t_prespike = max(np.where(bpcxi.dim1 <= .473)[0])  # cut off cxi integration before spike at end of shot
		cxx_arr = np.append(cxx_arr, np.sum(bpcxx.data[1:] * (bpcxx.dim1[1:] - bpcxx.dim1[:-1])))
		cxi_arr = np.append(cxi_arr,
		                    np.sum(bpcxi.data[1:t_prespike] * (bpcxi.dim1[1:t_prespike] - bpcxi.dim1[:t_prespike - 1])))
		bpte_arr = np.append(bpte_arr, np.sum(bpte.data[1:] * (bpte.dim1[1:] - bpte.dim1[:-1])))
		bpti_arr = np.append(bpti_arr, np.sum(bpti.data[1:] * (bpti.dim1[1:] - bpti.dim1[:-1])))
		bpshi_arr = np.append(bpshi_arr, np.sum(bpshi.data[1:] * (bpshi.dim1[1:] - bpshi.dim1[:-1])))
		bplim_arr = np.append(bplim_arr, np.sum(bplim.data[1:] * (bplim.dim1[1:] - bplim.dim1[:-1])))
		bphto_arr2 = np.append(bphto_arr2, np.sum(bphto.data[1:] * (bphto.dim1[1:] - bphto.dim1[:-1])))
		bphto_arr = np.append(bphto_arr, max(bphto.data) / 1000.)
		bden_arr = np.append(bden_arr, max(bdens.data.flatten()) / 1.e12)
	ax2.yaxis.set_visible(False)
	ax2r = ax2.twinx()
	ax2r.plot(xplot, bden_arr, 'o-', c=clrs[0])
	ax2r.set_ylabel('max(bdens) e12 [cm^-3]', c=clrs[0], fontsize=fs)
	ax2rr = ax2.twinx()
	ax2rr.spines["right"].set_position(("axes", 1.2))
	make_patch_spines_invisible(ax2rr)
	ax2rr.spines["right"].set_visible(True)
	ax2rr.yaxis.set_label_position('right')
	ax2rr.yaxis.set_ticks_position('right')
	ax2rr.plot(xplot, bphto_arr, 'o-', c=clrs[1])
	ax2rr.set_ylabel('max(beam heating) [kW]', c=clrs[1], fontsize=fs)
	ax2r.set_ylim(ymin=0)
	ax2rr.set_ylim(ymin=0)
	
	ax3.plot(xplot, bpshi_arr / j_tot, 'o-', label='shine-through')
	ax3.plot(xplot, bplim_arr / j_tot, 'o-', label='orbit loss')
	ax3.plot(xplot, cxi_arr / j_tot, 'o-', label='cx int')
	ax3.plot(xplot, cxx_arr / j_tot, 'o-', label='cx ext')
	ax3.set_ylabel('total fraction', fontsize=fs)
	ax3.set_xlabel(xlab, fontsize=fs)
	ax3.legend(fontsize=leg_fs)
	
	ax4.yaxis.set_visible(False)
	ax4r = ax4.twinx()
	ax4r.plot(xplot, bphto_arr2, 'o-', label='total')
	ax4r.plot(xplot, bpte_arr, 'o-', label='elec')
	ax4r.plot(xplot, bpti_arr, 'o-', label='ions')
	ax4.set_xlabel(xlab, fontsize=fs)
	ax4r.set_ylabel('Beam Heating [J]', fontsize=fs)
	ax4r.legend(fontsize=leg_fs)
	
	for ax in [ax1, ax1r, ax1rr, ax2, ax2r, ax2rr, ax3, ax4, ax4r]:
		ax.tick_params(labelsize=fs)
	
	plt.tight_layout()
	plt.show()


def stored_energy():
	fs, leg_fs = 12, 12
	fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(ncols=2, nrows=2, sharex=True, figsize=(7, 5))
	desc = ['NBI and NUBEAM', 'NBI no NUBEAM', 'no NBI']
	shotset1 = [1034650301, 1034650103, 1034460103]
	shotset2 = [1036170301, 1036170103, 1036580103]
	for iss, shotset in enumerate([shotset1, shotset2]):
		for i, shot in enumerate(shotset):
			bpti = SimpleSignal(shot, '\\ti0')
			utotl = SimpleSignal(shot, '\\utotl')  # J/cm^3
			dvol = SimpleSignal(shot, '\\dvol')  # cm^3
			utot1d = np.sum(utotl.data * dvol.data, axis=1)
			if iss == 0:
				ax1.plot(bpti.dim1 * 1000., bpti.data, label=desc[i])
				ax3.plot(utotl.dim2 * 1000., utot1d)
			else:
				ax2.plot(bpti.dim1 * 1000., bpti.data)
				ax4.plot(utotl.dim2 * 1000., utot1d, label=desc[i])
	ax1.legend(loc='lower left')
	# ax2.legend(loc='lower left')
	ax3.set_xlabel('time (ms)', fontsize=leg_fs + 2)
	ax4.set_xlabel('time (ms)', fontsize=leg_fs + 2)
	ax1.set_ylabel('$T_i(0)$ (eV)', fontsize=leg_fs + 2)
	ax3.set_ylabel('$W_{tot}$ (J)', fontsize=leg_fs + 2)
	ax1.set_ylim((0, 300))
	ax2.set_ylim((0, 300))
	ax3.set_ylim((0, 800))
	ax4.set_ylim((0, 800))
	for ax in [ax1, ax2, ax3, ax4]:
		ax.set_xlim((460, 473))
		ax.axvline(463, c='k', ls='--')
		ax.axvline(470, c='k', ls='--')
		ax.tick_params(labelsize=fs)
	plt.tight_layout()
	plt.savefig('C:/Users/wcapecch/Dropbox/work_stuff/group_meetings/ti0_wtot.png')
	plt.show()


def beam_frac():
	fig = plt.figure(figsize=(5, 4))
	shots = [1036170301]  # , 1034650301]
	# shots = [1000020916]
	for i, shot in enumerate(shots):
		if i == 0:
			ls = '-'
		else:
			plt.gca().set_prop_cycle(None)
			ls = '--'
		bpshi = SimpleSignal(shot, '\\bpshi')
		bplim = SimpleSignal(shot, '\\bplim')
		bpcxi = SimpleSignal(shot, '\\bpcxi')
		bpcxx = SimpleSignal(shot, '\\bpcxx')
		bpth = SimpleSignal(shot, '\\bpth')
		b1, = plt.plot(bpshi.dim1, bpshi.data / 1000., label='\\bpshi', ls=ls)
		b2, = plt.plot(bplim.dim1, bplim.data / 1000., label='\\bplim', ls=ls)
		# b3, = plt.plot(bpcxi.dim1, bpcxi.data / 1000., label='\\bpcxi', ls=ls)
		b4, = plt.plot(bpcxx.dim1, bpcxx.data / 1000., label='\\bpcxx', ls=ls)
		# b5, = plt.plot(bpth.dim1, bpth.data / 1000., label='\\bpth', ls=ls)
		# plt.plot(bpshi.dim1, bpshi.data+bplim.data+bpcxi.data+bpcxx.data+bpth.data)
		if i == 0:
			plt.legend([b1, b2, b4], ['shine-through', 'orbit loss', 'cx loss (ext)'])
		# plt.legend([b1, b2, b3, b4, b5], ['\\bpshi', '\\bplim', '\\bpcxi', '\\bpcxx', '\\bpth'])
		# clrs = plt.rcParams['axes.prop_cycle'].by_key()['color']
		# tcon = [.46454, .46677, .469]
		# pbeam = 170.  # beam power [kW]
		# sh_con = np.array([.21877, .16951, .20891])*pbeam
		# pl_con = np.array([.51248, .31675, .18816])*pbeam
		# coup_con = np.array([.26876, .51374, .61292])*pbeam
		# plt.plot(tcon, sh_con, 's', c=clrs[0])
		# plt.plot(tcon, pl_con, 's', c=clrs[1])
		plt.xlabel('time (s)')
		plt.ylabel('Power (kW)')
		plt.xlim((.46, .473))
		plt.ylim((0, 60))
		plt.tight_layout()
	plt.show()


def beam_power_to_ion_elec():
	fig = plt.figure(figsize=(5, 4))
	# shots = [1036170301, 1034650301]
	shots = [1036170301]
	for i, shot in enumerate(shots):
		if i == 0:
			ls = '-'
		else:
			plt.gca().set_prop_cycle(None)
			ls = '--'
		bpti = SimpleSignal(shot, '\\bpti')
		bpte = SimpleSignal(shot, '\\bpte')
		bphto = SimpleSignal(shot, '\\bphto')
		b3, = plt.plot(bphto.dim1, bphto.data / 1000., label='\\bphto', ls=ls)
		b1, = plt.plot(bpti.dim1, bpti.data / 1000., label='\\bpti', ls=ls)
		b2, = plt.plot(bpte.dim1, bpte.data / 1000., label='\\bpte', ls=ls)
		if i == 0:
			plt.legend([b3, b1, b2], ['beam heating tot', 'ion heating', 'elec heating'])
		plt.xlabel('time (s)')
		plt.ylabel('Power (kW)')
		plt.xlim((.46, .473))
		plt.ylim((0, 100))
		plt.axvline(.463, c='k', ls='--')
		plt.axvline(.470, c='k', ls='--')
		plt.tight_layout()
	plt.show()


def shot105124():
	vbeam = [-88.2812, -88.2812, -88.2812, -88.2812, -88.2812, -88.2812, -88.2812, -88.2812, -88.2812, -88.2812,
	         -88.2812, -88.2812, -88.2812, -88.2812, -88.2812, -88.2812, -88.2812, -88.2812, -88.2812, -88.2812,
	         -77.2461, -88.2812, -88.2812, -88.2812, -88.2812, -88.2812, -88.2812, -99.3164, -88.2812, -88.2812,
	         -88.2812, -88.2812, -88.2812, -88.2812, -88.2812, -88.2812, -88.2812, -88.2812, -77.2461, -88.2812,
	         -88.2812, -88.2812, -88.2812, -99.3164, -88.2812, -99.3164, -88.2812, -88.2812, -88.2812, -88.2812,
	         -88.2812, -88.2812, -77.2461, -88.2812, -88.2812, -88.2812, -88.2812, -88.2812, -88.2812, -88.2812,
	         -88.2812, -88.2812, -88.2812, -88.2812, -88.2812, -88.2812, -88.2812, -77.2461, -88.2812, -88.2812,
	         -88.2812, -88.2812, -88.2812, -77.2461, -88.2812, -88.2812, -88.2812, -88.2812, -88.2812, -88.2812,
	         -88.2812, -77.2461, -88.2812, -88.2812, -88.2812, -88.2812, -88.2812, -88.2812, -77.2461, -88.2812,
	         -88.2812, -88.2812, -88.2812, -88.2812, -88.2812, -88.2812, -88.2812, -88.2812, -88.2812, -88.2812,
	         -88.2812, -77.2461, -88.2812, -88.2812, -77.2461, -88.2812, -88.2812, -77.2461, -88.2812, -88.2812,
	         -88.2812, -88.2812, -77.2461, -77.2461, -66.2109, -77.2461, -77.2461, -77.2461, -77.2461, -88.2812,
	         -99.3164, -99.3164, -110.352, -110.352, -110.352, -121.387, -121.387, -132.422, -143.457, -143.457,
	         -154.492, -176.562, -176.562, -187.598, -198.633, -209.668, -209.668, -220.703, -220.703, -220.703,
	         -242.773, -253.809, -253.809, -264.844, -275.879, -275.879, -286.914, -286.914, -297.949, -286.914,
	         -297.949, -297.949, -308.984, -320.02, -308.984, -320.02, -320.02, -320.02, -331.055, -331.055, -331.055,
	         -375.195, -430.371, -474.512, -507.617, -518.652, -518.652, -540.723, 706.25, 5352.05, 7636.33, 8971.58,
	         9699.9, 11057.2, 12271.1, 12977.3, 13341.5, 13595.3, 14125., 14544.3, 14754., 14897.5, 15085.1, 15581.6,
	         15824.4, 15978.9, 15978.9, 16078.2, 16133.4, 16166.5, 16188.6, 16210.6, 16221.7, 16254.8, 16265.8, 16243.8,
	         16232.7, 16221.7, 16177.5, 16166.5, 16133.4, 16100.3, 16056.2, 16144.4, 16155.5, 16199.6, 16221.7, 16243.8,
	         16210.6, 16177.5, 16144.4, 16133.4, 16133.4, 16177.5, 16254.8, 16265.8, 16243.8, 16177.5, 16188.6, 16188.6,
	         16210.6, 16232.7, 16243.8, 16210.6, 16210.6, 16243.8, 16276.9, 16276.9, 16287.9, 16298.9, 16265.8, 16232.7,
	         16265.8, 16276.9, 16276.9, 16265.8, 16276.9, 16276.9, 16276.9, 16243.8, 16254.8, 16254.8, 16254.8, 16243.8,
	         16254.8, 16232.7, 16232.7, 16232.7, 16232.7, 16243.8, 16232.7, 16232.7, 16166.5, 15934.8, 15890.6, 16034.1,
	         16133.4, 16177.5, 16199.6, 16210.6, 16199.6, 16210.6, 16210.6, 16210.6, 16210.6, 16210.6, 16199.6, 16155.5,
	         16166.5, 16144.4, 16089.3, 16056.2, 16001., 16034.1, 16078.2, 16111.3, 16122.4, 16078.2, 15978.9, 16023.,
	         16034.1, 16078.2, 16089.3, 16034.1, 16001., 16045.1, 16001., 16001., 15945.8, 15945.8, 16012., 16056.2,
	         16045.1, 15989.9, 15901.7, 15978.9, 16012., 15901.7, 15967.9, 15934.8, 15989.9, 16023., 15978.9, 15890.6,
	         15956.8, 15923.7, 15945.8, 15912.7, 15923.7, 15967.9, 15967.9, 15912.7, 15967.9, 15945.8, 15912.7, 15967.9,
	         15989.9, 15945.8, 15967.9, 15934.8, 15934.8, 15934.8, 15934.8, 15923.7, 15956.8, 15934.8, 15879.6, 15934.8,
	         15901.7, 15934.8, 15923.7, 15956.8, 15934.8, 15923.7, 15945.8, 15934.8, 15934.8, 15945.8, 15901.7, 15901.7,
	         15934.8, 15912.7, 15923.7, 15890.6, 15890.6, 15923.7, 15890.6, 15901.7, 15934.8, 15934.8, 15923.7, 15901.7,
	         15923.7, 15934.8, 15934.8, 15934.8, 15923.7, 15890.6, 15879.6, 15912.7, 15934.8, 15923.7, 15934.8, 15890.6,
	         15835.4, 15879.6, 15901.7, 15923.7, 15923.7, 15923.7, 15890.6, 15901.7, 15912.7, 15923.7, 15923.7, 15923.7,
	         15912.7, 15901.7, 15868.6, 15890.6, 15901.7, 15901.7, 15890.6, 15901.7, 15912.7, 15912.7, 15912.7, 15912.7,
	         15912.7, 15912.7, 15890.6, 15890.6, 15901.7, 15912.7, 15890.6, 15901.7, 15912.7, 15890.6, 15901.7, 15912.7,
	         15912.7, 15912.7, 15901.7, 15912.7, 15901.7, 15912.7, 15901.7, 15901.7, 15901.7, 15890.6, 15890.6, 15890.6,
	         15890.6, 15879.6, 15890.6, 15901.7, 15901.7, 15901.7, 15901.7, 15912.7, 15901.7, 15934.8, 15967.9, 15989.9,
	         16034.1, 16067.2, 9611.62, 5506.54, 3178.12, 2019.43, 1357.32, 960.059, 728.32, 562.793, 452.441, 364.16,
	         297.949, 231.738, 187.598, 154.492, 121.387, 99.3164, 88.2812, 66.2109, 55.1758, 33.1055, 33.1055, 33.1055,
	         22.0703, 22.0703, 11.0352, 11.0352, 11.0352, 0., 0., -11.0352, 0., -11.0352, -22.0703, -11.0352, -11.0352,
	         -22.0703, -22.0703, -22.0703, -22.0703, -22.0703, -22.0703, -22.0703, -22.0703, -22.0703, -22.0703,
	         -33.1055, -22.0703, -22.0703, -33.1055, -22.0703, -33.1055, -33.1055, -33.1055, -44.1406, -33.1055,
	         -33.1055, -33.1055, -33.1055, -44.1406, -33.1055, -33.1055, -44.1406, -33.1055, -44.1406, -44.1406,
	         -33.1055, -44.1406, -44.1406, -44.1406, -44.1406, -44.1406, -44.1406, -44.1406, -44.1406]
	tbeam = [.00651125, .00653125, .00655125, .00657125, .00659125, .00661125, .00663125, .00665125, .00667125,
	         .00669125, .00671125, .00673125, .00675125, .00677125, .00679125, .00681125, .00683125, .00685125,
	         .00687125, .00689125, .00691125, .00693125, .00695125, .00697125, .00699125, .00701125, .00703125,
	         .00705125, .00707125, .00709125, .00711125, .00713125, .00715125, .00717125, .00719125, .00721125,
	         .00723125, .00725125, .00727125, .00729125, .00731125, .00733125, .00735125, .00737125, .00739125,
	         .00741125, .00743125, .00745125, .00747125, .00749125, .00751125, .00753125, .00755125, .00757125,
	         .00759125, .00761125, .00763125, .00765125, .00767125, .00769125, .00771125, .00773125, .00775125,
	         .00777125, .00779125, .00781125, .00783125, .00785125, .00787125, .00789125, .00791125, .00793125,
	         .00795125, .00797125, .00799125, .00801125, .00803125, .00805125, .00807125, .00809125, .00811125,
	         .00813125, .00815125, .00817125, .00819125, .00821125, .00823125, .00825125, .00827125, .00829125,
	         .00831125, .00833125, .00835125, .00837125, .00839125, .00841125, .00843125, .00845125, .00847125,
	         .00849125, .00851125, .00853125, .00855125, .00857125, .00859125, .00861125, .00863125, .00865125,
	         .00867125, .00869125, .00871125, .00873125, .00875125, .00877125, .00879125, .00881125, .00883125,
	         .00885125, .00887125, .00889125, .00891125, .00893125, .00895125, .00897125, .00899125, .00901125,
	         .00903125, .00905125, .00907125, .00909125, .00911125, .00913125, .00915125, .00917125, .00919125,
	         .00921125, .00923125, .00925125, .00927125, .00929125, .00931125, .00933125, .00935125, .00937125,
	         .00939125, .00941125, .00943125, .00945125, .00947125, .00949125, .00951125, .00953125, .00955125,
	         .00957125, .00959125, .00961125, .00963125, .00965125, .00967125, .00969125, .00971125, .00973125,
	         .00975125, .00977125, .00979125, .00981125, .00983125, .00985125, .00987125, .00989125, .00991125,
	         .00993125, .00995125, .00997125, .00999125, .0100112, .0100313, .0100513, .0100712, .0100913, .0101112,
	         .0101313, .0101513, .0101713, .0101912, .0102113, .0102312, .0102513, .0102712, .0102913, .0103112,
	         .0103312, .0103512, .0103713, .0103912, .0104113, .0104312, .0104512, .0104712, .0104913, .0105112,
	         .0105313, .0105513, .0105712, .0105913, .0106113, .0106313, .0106512, .0106713, .0106912, .0107112,
	         .0107313, .0107513, .0107712, .0107913, .0108112, .0108312, .0108513, .0108713, .0108912, .0109113,
	         .0109312, .0109512, .0109713, .0109913, .0110112, .0110312, .0110513, .0110712, .0110912, .0111113,
	         .0111313, .0111512, .0111713, .0111912, .0112112, .0112313, .0112513, .0112712, .0112913, .0113112,
	         .0113312, .0113513, .0113713, .0113912, .0114113, .0114312, .0114512, .0114712, .0114913, .0115112,
	         .0115312, .0115513, .0115712, .0115913, .0116113, .0116313, .0116512, .0116713, .0116912, .0117113,
	         .0117313, .0117513, .0117712, .0117913, .0118112, .0118313, .0118512, .0118713, .0118912, .0119112,
	         .0119312, .0119513, .0119712, .0119913, .0120112, .0120312, .0120513, .0120713, .0120913, .0121113,
	         .0121313, .0121512, .0121713, .0121912, .0122113, .0122312, .0122513, .0122712, .0122912, .0123112,
	         .0123313, .0123512, .0123713, .0123912, .0124112, .0124312, .0124513, .0124712, .0124913, .0125112,
	         .0125312, .0125513, .0125713, .0125913, .0126112, .0126313, .0126512, .0126712, .0126913, .0127113,
	         .0127312, .0127513, .0127712, .0127912, .0128113, .0128313, .0128512, .0128713, .0128912, .0129112,
	         .0129313, .0129513, .0129712, .0129913, .0130112, .0130312, .0130513, .0130713, .0130913, .0131112,
	         .0131313, .0131512, .0131713, .0131913, .0132113, .0132312, .0132513, .0132712, .0132912, .0133113,
	         .0133313, .0133512, .0133713, .0133912, .0134112, .0134312, .0134513, .0134712, .0134912, .0135112,
	         .0135312, .0135513, .0135713, .0135913, .0136112, .0136313, .0136512, .0136713, .0136913, .0137113,
	         .0137312, .0137513, .0137712, .0137913, .0138112, .0138313, .0138512, .0138712, .0138912, .0139113,
	         .0139312, .0139513, .0139712, .0139912, .0140112, .0140313, .0140513, .0140713, .0140913, .0141112,
	         .0141313, .0141513, .0141713, .0141912, .0142113, .0142312, .0142512, .0142712, .0142913, .0143112,
	         .0143313, .0143512, .0143712, .0143912, .0144113, .0144312, .0144513, .0144712, .0144912, .0145112,
	         .0145313, .0145513, .0145713, .0145913, .0146112, .0146312, .0146513, .0146713, .0146912, .0147113,
	         .0147312, .0147512, .0147713, .0147913, .0148112, .0148313, .0148512, .0148712, .0148913, .0149113,
	         .0149312, .0149513, .0149712, .0149912, .0150112, .0150313, .0150513, .0150712, .0150913, .0151112,
	         .0151313, .0151513, .0151713, .0151912, .0152113, .0152312, .0152513, .0152713, .0152913, .0153112,
	         .0153313, .0153512, .0153712, .0153912, .0154113, .0154312, .0154512, .0154712, .0154912, .0155112,
	         .0155313, .0155513, .0155712, .0155913, .0156112, .0156313, .0156513, .0156712, .0156913, .0157112,
	         .0157312, .0157513, .0157712, .0157913, .0158112, .0158313, .0158512, .0158713, .0158913, .0159112,
	         .0159313, .0159512, .0159712, .0159913, .0160112, .0160313, .0160512, .0160713, .0160912, .0161112,
	         .0161313, .0161513, .0161712, .0161912, .0162113, .0162313, .0162512, .0162713, .0162912, .0163113,
	         .0163312, .0163512, .0163713, .0163913, .0164112, .0164312, .0164513, .0164712, .0164912]
	ibeam = [-.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.244141,
	         -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.146484, -.195312, -.195312,
	         -.195312, -.195312, -.244141, -.195312, -.195312, -.195312, -.244141, -.195312, -.195312, -.244141,
	         -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.244141,
	         -.195312, -.195312, -.195312, -.195312, -.244141, -.195312, -.244141, -.195312, -.195312, -.146484,
	         -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312,
	         -.244141, -.195312, -.146484, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312,
	         -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312,
	         -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312,
	         -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312,
	         -.195312, -.195312, -.195312, -.195312, -.195312, -.244141, -.195312, -.195312, -.195312, -.195312,
	         -.195312, -.195312, -.195312, -.244141, -.195312, -.195312, -.146484, -.195312, -.195312, -.195312,
	         -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312,
	         -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312,
	         -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312,
	         -.146484, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312,
	         -.195312, 4.39453, 9.57031, 12.3047, 13.1348, 13.7207, 14.0625, 14.2578, 29.834, 25.8789, 26.6113, 24.5605,
	         23.6816, 26.0254, 25.4883, 25.5371, 26.416, 26.3672, 27.9297, 26.416, 27.3926, 26.2695, 27.3438, 28.8574,
	         28.0762, 28.6133, 29.248, 28.8086, 30.127, 29.9316, 29.9805, 29.1992, 28.9062, 29.3945, 29.1992, 31.0547,
	         30.6152, 31.1035, 31.4453, 32.8613, 31.4941, 30.5664, 33.4473, 32.2754, 31.6895, 32.0801, 31.1523, 31.4941,
	         30.5176, 31.3965, 32.2754, 30.8105, 32.959, 31.0547, 29.7363, 30.2734, 30.0293, 30.9082, 31.8359, 31.3477,
	         31.7383, 30.5664, 31.25, 31.7871, 30.6152, 29.7852, 28.9062, 29.3945, 29.7363, 29.1992, 29.3457, 29.834,
	         29.1992, 29.1992, 29.248, 29.4922, 29.541, 29.8828, 29.7363, 30.0293, 29.7852, 29.6875, 30.0781, 30.0781,
	         30.1758, 30.2246, 29.834, 30.0781, 30.0781, 29.8828, 30.2734, 30.4688, 31.4453, 32.4219, 32.8613, 31.5918,
	         31.4941, 31.0059, 30.5664, 30.7129, 30.7617, 30.7129, 30.9082, 30.6152, 31.0059, 31.0547, 31.2012, 31.7871,
	         31.7871, 31.8848, 32.0801, 32.373, 32.8125, 33.2031, 32.9102, 32.8613, 32.7637, 33.0566, 33.5938, 33.8379,
	         33.9355, 33.9844, 33.8867, 33.9844, 34.4727, 34.5215, 34.7168, 35.0098, 35.3027, 35.5469, 35.4004, 35.498,
	         35.5957, 35.8887, 36.4258, 36.377, 36.4746, 36.9141, 37.0117, 37.3535, 37.1094, 37.1582, 37.3047, 37.793,
	         37.8906, 38.1348, 38.2324, 38.5742, 38.7207, 38.6719, 38.7207, 38.8672, 38.8184, 38.8672, 39.1113, 38.8184,
	         38.8672, 38.916, 38.916, 39.0137, 39.0625, 39.0625, 38.9648, 39.209, 39.0625, 39.1113, 39.2578, 39.1602,
	         39.2578, 39.209, 39.209, 39.1113, 39.1113, 39.1602, 39.0137, 38.9648, 38.8672, 38.7695, 38.7207, 38.7207,
	         38.5742, 38.6719, 38.623, 38.623, 38.6719, 38.623, 38.623, 38.5254, 38.3301, 38.3789, 38.2812, 38.2812,
	         38.1348, 37.9883, 37.8418, 37.7441, 37.6953, 37.6953, 37.6465, 37.3535, 37.3047, 37.3047, 36.9141, 37.0117,
	         37.3047, 36.9629, 36.9629, 36.8652, 36.7188, 36.6211, 36.6211, 36.4746, 36.377, 36.084, 35.791, 35.6445,
	         35.6934, 35.6445, 35.6934, 35.498, 35.4492, 35.3516, 35.3027, 35.1074, 35.0098, 34.8145, 34.7656, 34.4727,
	         34.3262, 34.2285, 34.2285, 34.1309, 33.9844, 33.8379, 33.7891, 33.5938, 33.5449, 33.4473, 33.3496, 33.1055,
	         32.9102, 32.7637, 32.6172, 32.5195, 32.4707, 32.2266, 32.2266, 32.0801, 31.9824, 31.9336, 31.7871, 31.7383,
	         31.5918, 31.543, 31.3965, 31.2012, 31.1035, 31.0059, 30.7617, 30.6641, 30.5664, 30.0781, 27.6855, 25.0488,
	         22.6074, 19.7266, 8.00781, 5.17578, 3.32031, 2.39258, 1.9043, 1.75781, 1.61133, 1.5625, 1.46484, 1.41602,
	         1.36719, 1.2207, 1.07422, .878906, .683594, .585938, .390625, .244141, .146484, .0488281, 0., 0., 0., 0.,
	         0., 0., 0., 0., -.0488281, -.0976562, -.0976562, -.146484, -.195312, -.146484, -.195312, -.146484,
	         -.195312, -.195312, -.146484, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312,
	         -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.146484, -.195312,
	         -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.146484, -.195312,
	         -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312, -.195312]
	t2 = [.0065125, .0065325, .0065525, .0065725, .0065925, .0066125, .0066325, .0066525, .0066725, .0066925,
	      .0067125, .0067325, .0067525, .0067725, .0067925, .0068125, .0068325, .0068525, .0068725, .0068925,
	      .0069125, .0069325, .0069525, .0069725, .0069925, .0070125, .0070325, .0070525, .0070725, .0070925,
	      .0071125, .0071325, .0071525, .0071725, .0071925, .0072125, .0072325, .0072525, .0072725, .0072925,
	      .0073125, .0073325, .0073525, .0073725, .0073925, .0074125, .0074325, .0074525, .0074725, .0074925,
	      .0075125, .0075325, .0075525, .0075725, .0075925, .0076125, .0076325, .0076525, .0076725, .0076925,
	      .0077125, .0077325, .0077525, .0077725, .0077925, .0078125, .0078325, .0078525, .0078725, .0078925,
	      .0079125, .0079325, .0079525, .0079725, .0079925, .0080125, .0080325, .0080525, .0080725, .0080925,
	      .0081125, .0081325, .0081525, .0081725, .0081925, .0082125, .0082325, .0082525, .0082725, .0082925,
	      .0083125, .0083325, .0083525, .0083725, .0083925, .0084125, .0084325, .0084525, .0084725, .0084925,
	      .0085125, .0085325, .0085525, .0085725, .0085925, .0086125, .0086325, .0086525, .0086725, .0086925,
	      .0087125, .0087325, .0087525, .0087725, .0087925, .0088125, .0088325, .0088525, .0088725, .0088925,
	      .0089125, .0089325, .0089525, .0089725, .0089925, .0090125, .0090325, .0090525, .0090725, .0090925,
	      .0091125, .0091325, .0091525, .0091725, .0091925, .0092125, .0092325, .0092525, .0092725, .0092925,
	      .0093125, .0093325, .0093525, .0093725, .0093925, .0094125, .0094325, .0094525, .0094725, .0094925,
	      .0095125, .0095325, .0095525, .0095725, .0095925, .0096125, .0096325, .0096525, .0096725, .0096925,
	      .0097125, .0097325, .0097525, .0097725, .0097925, .0098125, .0098325, .0098525, .0098725, .0098925,
	      .0099125, .0099325, .0099525, .0099725, .0099925, .0100125, .0100325, .0100525, .0100725, .0100925,
	      .0101125, .0101325, .0101525, .0101725, .0101925, .0102125, .0102325, .0102525, .0102725, .0102925,
	      .0103125, .0103325, .0103525, .0103725, .0103925, .0104125, .0104325, .0104525, .0104725, .0104925,
	      .0105125, .0105325, .0105525, .0105725, .0105925, .0106125, .0106325, .0106525, .0106725, .0106925,
	      .0107125, .0107325, .0107525, .0107725, .0107925, .0108125, .0108325, .0108525, .0108725, .0108925,
	      .0109125, .0109325, .0109525, .0109725, .0109925, .0110125, .0110325, .0110525, .0110725, .0110925,
	      .0111125, .0111325, .0111525, .0111725, .0111925, .0112125, .0112325, .0112525, .0112725, .0112925,
	      .0113125, .0113325, .0113525, .0113725, .0113925, .0114125, .0114325, .0114525, .0114725, .0114925,
	      .0115125, .0115325, .0115525, .0115725, .0115925, .0116125, .0116325, .0116525, .0116725, .0116925,
	      .0117125, .0117325, .0117525, .0117725, .0117925, .0118125, .0118325, .0118525, .0118725, .0118925,
	      .0119125, .0119325, .0119525, .0119725, .0119925, .0120125, .0120325, .0120525, .0120725, .0120925,
	      .0121125, .0121325, .0121525, .0121725, .0121925, .0122125, .0122325, .0122525, .0122725, .0122925,
	      .0123125, .0123325, .0123525, .0123725, .0123925, .0124125, .0124325, .0124525, .0124725, .0124925,
	      .0125125, .0125325, .0125525, .0125725, .0125925, .0126125, .0126325, .0126525, .0126725, .0126925,
	      .0127125, .0127325, .0127525, .0127725, .0127925, .0128125, .0128325, .0128525, .0128725, .0128925,
	      .0129125, .0129325, .0129525, .0129725, .0129925, .0130125, .0130325, .0130525, .0130725, .0130925,
	      .0131125, .0131325, .0131525, .0131725, .0131925, .0132125, .0132325, .0132525, .0132725, .0132925,
	      .0133125, .0133325, .0133525, .0133725, .0133925, .0134125, .0134325, .0134525, .0134725, .0134925,
	      .0135125, .0135325, .0135525, .0135725, .0135925, .0136125, .0136325, .0136525, .0136725, .0136925,
	      .0137125, .0137325, .0137525, .0137725, .0137925, .0138125, .0138325, .0138525, .0138725, .0138925,
	      .0139125, .0139325, .0139525, .0139725, .0139925, .0140125, .0140325, .0140525, .0140725, .0140925,
	      .0141125, .0141325, .0141525, .0141725, .0141925, .0142125, .0142325, .0142525, .0142725, .0142925,
	      .0143125, .0143325, .0143525, .0143725, .0143925, .0144125, .0144325, .0144525, .0144725, .0144925,
	      .0145125, .0145325, .0145525, .0145725, .0145925, .0146125, .0146325, .0146525, .0146725, .0146925,
	      .0147125, .0147325, .0147525, .0147725, .0147925, .0148125, .0148325, .0148525, .0148725, .0148925,
	      .0149125, .0149325, .0149525, .0149725, .0149925, .0150125, .0150325, .0150525, .0150725, .0150925,
	      .0151125, .0151325, .0151525, .0151725, .0151925, .0152125, .0152325, .0152525, .0152725, .0152925,
	      .0153125, .0153325, .0153525, .0153725, .0153925, .0154125, .0154325, .0154525, .0154725, .0154925,
	      .0155125, .0155325, .0155525, .0155725, .0155925, .0156125, .0156325, .0156525, .0156725, .0156925,
	      .0157125, .0157325, .0157525, .0157725, .0157925, .0158125, .0158325, .0158525, .0158725, .0158925,
	      .0159125, .0159325, .0159525, .0159725, .0159925, .0160125, .0160325, .0160525, .0160725, .0160925,
	      .0161125, .0161325, .0161525, .0161725, .0161925, .0162125, .0162325, .0162525, .0162725, .0162925,
	      .0163125, .0163325, .0163525, .0163725, .0163925, .0164125, .0164325, .0164525, .0164725, .0164925]
	# plt.plot(tbeam, vbeam)
	plt.plot(t2, ibeam)
	plt.show()


if __name__ == '__main__':
	shot105124()
# gauss2d_integral()
do_nothing = 1
