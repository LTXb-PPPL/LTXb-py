import matplotlib.pyplot as plt
import numpy as np

from toolbox.helpful_stuff import closest

qe = 1.60e-19
me = 9.11e-31
mi = 1.67e-27
eps0 = 8.85e-12


def i_ch_ex_data():
	# energy [eV]
	# sigma [cm^2]
	energy = np.array(
		[0.12, 0.2, 0.4, 0.7, 1.0, 2.0, 4.0, 7.0, 10, 20, 40, 70, 100, 200, 400, 700, 1000, 2000, 4000, 7000,
		 10000, 20000, 40000, 70000, 100000, 200000, 400000, 630000])
	sigma = np.array(
		[496, 470, 445, 424, 410, 383, 358, 333, 317, 293, 270, 254, 244, 222, 203, 188, 171, 144, 120, 94.2, 77.5,
		 44.5, 16.7, 3.77, 1.01, 0.0609, 0.00176, 0.000135])
	sigma = sigma * 1.e-17
	return energy, sigma


def iimpact_data():
	# energy [eV]
	# sigma [cm^2]
	energy = np.array(
		[1000, 9400, 10000, 15000, 20000, 30000, 40000, 45000, 50000, 60000, 70000, 80000, 90000, 100000, 150000,
		 200000, 300000, 400000, 700000, 1000000, 1500000])
	sigma = np.array(
		[0.05, 1.62, 1.84, 4.21, 7.20, 12.1, 13.9, 14.1, 14.0, 13.7, 13.0, 12.3, 11.6, 11.0, 8.72, 7.14, 5.14, 4.04,
		 2.54, 1.88, 1.34])
	sigma = sigma * 1.e-17
	return energy, sigma


def eimpact_data():
	eb_val = np.linspace(1, 25, endpoint=True, num=25) * 1000.
	# eb_val = (findgen(25)+1) * 1000.
	
	te_val = [1.000000E+00, 1.151395E+00, 1.325711E+00, 1.526418E+00, 1.757511E+00, 2.023590E+00, 2.329952E+00,
	          2.682696E+00, 3.088844E+00, 3.556480E+00, 4.094915E+00, 4.714866E+00, 5.428675E+00, 6.250552E+00,
	          7.196857E+00, 8.286428E+00, 9.540955E+00, 1.098541E+01, 1.264855E+01, 1.456348E+01, 1.676833E+01,
	          1.930698E+01, 2.222996E+01, 2.559548E+01, 2.947052E+01, 3.393222E+01, 3.906940E+01, 4.498433E+01,
	          5.179475E+01, 5.963623E+01, 6.866488E+01, 7.906043E+01, 9.102982E+01, 1.048113E+02, 1.206793E+02,
	          1.389495E+02, 1.599859E+02, 1.842070E+02, 2.120951E+02, 2.442053E+02, 2.811769E+02, 3.237458E+02,
	          3.727594E+02, 4.291934E+02, 4.941713E+02, 5.689866E+02, 6.551286E+02, 7.543120E+02, 8.685114E+02,
	          1.000000E+03, 1.046086E+03, 1.244677E+03, 1.480968E+03, 1.762118E+03, 2.096641E+03, 2.494671E+03,
	          2.968264E+03, 3.531764E+03, 4.202240E+03, 5.000000E+03]
	te_val = np.array(te_val)
	sigmav = np.zeros((len(te_val), len(eb_val)))
	sigmav[0, :] = [2.178130E-14, 1.270193E-13, 4.696573E-13, 1.333502E-12, 3.184763E-12, 6.719030E-12, 1.289989E-11,
	                2.298460E-11, 3.853374E-11, 6.140357E-11, 9.372120E-11, 1.378442E-10, 1.963074E-10, 2.717597E-10,
	                3.668953E-10, 4.843822E-10, 6.267919E-10, 7.965324E-10, 9.957884E-10, 1.226469E-09, 1.490166E-09,
	                1.788121E-09, 2.121201E-09, 2.489891E-09, 2.894287E-09]
	sigmav[1, :] = [1.075665E-13, 4.866858E-13, 1.490188E-12, 3.652377E-12, 7.745319E-12, 1.480726E-11, 2.615744E-11,
	                4.339521E-11, 6.838331E-11, 1.032164E-10, 1.501772E-10, 2.116822E-10, 2.902219E-10, 3.882967E-10,
	                5.083524E-10, 6.527195E-10, 8.235554E-10, 1.022794E-09, 1.252105E-09, 1.512858E-09, 1.806096E-09,
	                2.132526E-09, 2.492504E-09, 2.886040E-09, 3.312808E-09]
	sigmav[2, :] = [4.472421E-13, 1.626596E-12, 4.229205E-12, 9.116743E-12, 1.741746E-11, 3.052513E-11, 5.008689E-11,
	                7.797787E-11, 1.162640E-10, 1.671551E-10, 2.329518E-10, 3.159877E-10, 4.185714E-10, 5.429298E-10,
	                6.911546E-10, 8.651545E-10, 1.066614E-09, 1.296961E-09, 1.557338E-09, 1.848587E-09, 2.171238E-09,
	                2.525507E-09, 2.911298E-09, 3.328214E-09, 3.775574E-09]
	sigmav[3, :] = [1.595596E-12, 4.809080E-12, 1.085303E-11, 2.091858E-11, 3.647027E-11, 5.920038E-11, 9.099191E-11,
	                1.338758E-10, 1.899823E-10, 2.614891E-10, 3.505677E-10, 4.593309E-10, 5.897837E-10, 7.437778E-10,
	                9.229730E-10, 1.128804E-09, 1.362455E-09, 1.624842E-09, 1.916599E-09, 2.238075E-09, 2.589334E-09,
	                2.970165E-09, 3.380086E-09, 3.818367E-09, 4.284043E-09]
	sigmav[4, :] = [4.967035E-12, 1.273569E-11, 2.542924E-11, 4.446421E-11, 7.155158E-11, 1.085673E-10, 1.574937E-10,
	                2.203682E-10, 2.992334E-10, 3.960884E-10, 5.128423E-10, 6.512728E-10, 8.129886E-10, 9.993991E-10,
	                1.211689E-09, 1.450801E-09, 1.717423E-09, 2.011981E-09, 2.334642E-09, 2.685316E-09, 3.063666E-09,
	                3.469121E-09, 3.900889E-09, 4.357982E-09, 4.839227E-09]
	sigmav[5, :] = [1.369280E-11, 3.054867E-11, 5.487504E-11, 8.816322E-11, 1.322731E-10, 1.891417E-10, 2.607124E-10,
	                3.488879E-10, 4.554891E-10, 5.822170E-10, 7.306188E-10, 9.020599E-10, 1.097700E-09, 1.318478E-09,
	                1.565096E-09, 1.838021E-09, 2.137474E-09, 2.463442E-09, 2.815682E-09, 3.193734E-09, 3.596932E-09,
	                4.024421E-09, 4.475178E-09, 4.948027E-09, 5.441659E-09]
	sigmav[6, :] = [3.386754E-11, 6.703081E-11, 1.099134E-10, 1.640856E-10, 2.315799E-10, 3.143426E-10, 4.141912E-10,
	                5.327983E-10, 6.716746E-10, 8.321496E-10, 1.015355E-09, 1.222212E-09, 1.453420E-09, 1.709454E-09,
	                1.990567E-09, 2.296785E-09, 2.627925E-09, 2.983597E-09, 3.363221E-09, 3.766040E-09, 4.191138E-09,
	                4.637457E-09, 5.103814E-09, 5.588917E-09, 6.091389E-09]
	sigmav[7, :] = [7.602994E-11, 1.357394E-10, 2.057718E-10, 2.882688E-10, 3.857446E-10, 5.002553E-10, 6.335012E-10,
	                7.869017E-10, 9.616289E-10, 1.158621E-09, 1.378589E-09, 1.622020E-09, 1.889180E-09, 2.180124E-09,
	                2.494702E-09, 2.832571E-09, 3.193209E-09, 3.575926E-09, 3.979885E-09, 4.404111E-09, 4.847515E-09,
	                5.308909E-09, 5.787018E-09, 6.280505E-09, 6.787977E-09]
	sigmav[8, :] = [1.565050E-10, 2.556887E-10, 3.623250E-10, 4.804721E-10, 6.138658E-10, 7.649764E-10, 9.355107E-10,
	                1.126688E-09, 1.339373E-09, 1.574142E-09, 1.831317E-09, 2.110996E-09, 2.413067E-09, 2.737226E-09,
	                3.082993E-09, 3.449729E-09, 3.836651E-09, 4.242849E-09, 4.667304E-09, 5.108904E-09, 5.566456E-09,
	                6.038708E-09, 6.524361E-09, 7.022080E-09, 7.530512E-09]
	sigmav[9, :] = [2.980839E-10, 4.511842E-10, 6.034380E-10, 7.632569E-10, 9.368301E-10, 1.127550E-09, 1.337356E-09,
	                1.567377E-09, 1.818244E-09, 2.090229E-09, 2.383326E-09, 2.697308E-09, 3.031751E-09, 3.386065E-09,
	                3.759516E-09, 4.151245E-09, 4.560287E-09, 4.985587E-09, 5.426017E-09, 5.880391E-09, 6.347482E-09,
	                6.826030E-09, 7.314760E-09, 7.812390E-09, 8.317643E-09]
	sigmav[10, :] = [5.295362E-10, 7.505446E-10, 9.554179E-10, 1.160401E-09, 1.375798E-09, 1.606582E-09, 1.855200E-09,
	                 2.122835E-09, 2.409965E-09, 2.716625E-09, 3.042550E-09, 3.387249E-09, 3.750057E-09, 4.130169E-09,
	                 4.526669E-09, 4.938549E-09, 5.364729E-09, 5.804074E-09, 6.255411E-09, 6.717539E-09, 7.189242E-09,
	                 7.669304E-09, 8.156512E-09, 8.649671E-09, 9.147608E-09]
	sigmav[11, :] = [8.836728E-10, 1.183700E-09, 1.444684E-09, 1.694798E-09, 1.950373E-09, 2.218669E-09, 2.502920E-09,
	                 2.804480E-09, 3.123745E-09, 3.460572E-09, 3.814484E-09, 4.184785E-09, 4.570624E-09, 4.971041E-09,
	                 5.384996E-09, 5.811388E-09, 6.249081E-09, 6.696913E-09, 7.153712E-09, 7.618304E-09, 8.089528E-09,
	                 8.566240E-09, 9.047319E-09, 9.531680E-09, 1.001827E-08]
	sigmav[12, :] = [1.394055E-09, 1.778954E-09, 2.094960E-09, 2.386122E-09, 2.676688E-09, 2.976854E-09, 3.290853E-09,
	                 3.620288E-09, 3.965507E-09, 4.326209E-09, 4.701737E-09, 5.091220E-09, 5.493662E-09, 5.907987E-09,
	                 6.333072E-09, 6.767769E-09, 7.210922E-09, 7.661379E-09, 8.118001E-09, 8.579676E-09, 9.045316E-09,
	                 9.513873E-09, 9.984336E-09, 1.045574E-08, 1.092716E-08]
	sigmav[13, :] = [2.090834E-09, 2.559432E-09, 2.924427E-09, 3.248588E-09, 3.565661E-09, 3.889269E-09, 4.224768E-09,
	                 4.574016E-09, 4.937299E-09, 5.314149E-09, 5.703724E-09, 6.104991E-09, 6.516823E-09, 6.938049E-09,
	                 7.367487E-09, 7.803964E-09, 8.246328E-09, 8.693458E-09, 9.144269E-09, 9.597720E-09, 1.005282E-08,
	                 1.050861E-08, 1.096421E-08, 1.141877E-08, 1.187150E-08]
	sigmav[14, :] = [2.996491E-09, 3.539842E-09, 3.943298E-09, 4.289149E-09, 4.621661E-09, 4.958165E-09, 5.305156E-09,
	                 5.664699E-09, 6.036959E-09, 6.421261E-09, 6.816552E-09, 7.221622E-09, 7.635208E-09, 8.056046E-09,
	                 8.482903E-09, 8.914586E-09, 9.349957E-09, 9.787933E-09, 1.022749E-08, 1.066766E-08, 1.110754E-08,
	                 1.154629E-08, 1.198313E-08, 1.241732E-08, 1.284821E-08]
	sigmav[15, :] = [4.122287E-09, 4.724128E-09, 5.152196E-09, 5.506374E-09, 5.841745E-09, 6.179404E-09, 6.526924E-09,
	                 6.886484E-09, 7.258054E-09, 7.640688E-09, 8.033080E-09, 8.433815E-09, 8.841475E-09, 9.254693E-09,
	                 9.672176E-09, 1.009271E-08, 1.051516E-08, 1.093848E-08, 1.136171E-08, 1.178394E-08, 1.220436E-08,
	                 1.262222E-08, 1.303683E-08, 1.344758E-08, 1.385391E-08]
	sigmav[16, :] = [5.466094E-09, 6.104387E-09, 6.541569E-09, 6.890158E-09, 7.215554E-09, 7.542489E-09, 7.879503E-09,
	                 8.228802E-09, 8.590079E-09, 8.962060E-09, 9.343144E-09, 9.731675E-09, 1.012606E-08, 1.052480E-08,
	                 1.092655E-08, 1.133003E-08, 1.173413E-08, 1.213781E-08, 1.254015E-08, 1.294032E-08, 1.333756E-08,
	                 1.373120E-08, 1.412066E-08, 1.450540E-08, 1.488495E-08]
	sigmav[17, :] = [7.011954E-09, 7.661191E-09, 8.092181E-09, 8.422242E-09, 8.725840E-09, 9.031070E-09, 9.347342E-09,
	                 9.676825E-09, 1.001889E-08, 1.037190E-08, 1.073392E-08, 1.110304E-08, 1.147746E-08, 1.185555E-08,
	                 1.223585E-08, 1.261707E-08, 1.299804E-08, 1.337776E-08, 1.375531E-08, 1.412992E-08, 1.450088E-08,
	                 1.486760E-08, 1.522953E-08, 1.558623E-08, 1.593731E-08]
	sigmav[18, :] = [8.731358E-09, 9.365155E-09, 9.776539E-09, 1.007745E-08, 1.034952E-08, 1.062387E-08, 1.091070E-08,
	                 1.121217E-08, 1.152732E-08, 1.185416E-08, 1.219041E-08, 1.253389E-08, 1.288260E-08, 1.323475E-08,
	                 1.358879E-08, 1.394335E-08, 1.429724E-08, 1.464943E-08, 1.499905E-08, 1.534532E-08, 1.568758E-08,
	                 1.602529E-08, 1.635795E-08, 1.668517E-08, 1.700661E-08]
	sigmav[19, :] = [1.058590E-08, 1.117944E-08, 1.156099E-08, 1.182542E-08, 1.205914E-08, 1.229586E-08, 1.254668E-08,
	                 1.281375E-08, 1.309591E-08, 1.339081E-08, 1.369591E-08, 1.400876E-08, 1.432716E-08, 1.464917E-08,
	                 1.497313E-08, 1.529760E-08, 1.562135E-08, 1.594333E-08, 1.626265E-08, 1.657856E-08, 1.689043E-08,
	                 1.719771E-08, 1.749997E-08, 1.779685E-08, 1.808804E-08]
	sigmav[20, :] = [1.253077E-08, 1.306275E-08, 1.340820E-08, 1.363260E-08, 1.382443E-08, 1.401966E-08, 1.423029E-08,
	                 1.445872E-08, 1.470365E-08, 1.496255E-08, 1.523263E-08, 1.551123E-08, 1.579599E-08, 1.608483E-08,
	                 1.637599E-08, 1.666796E-08, 1.695946E-08, 1.724941E-08, 1.753692E-08, 1.782122E-08, 1.810170E-08,
	                 1.837782E-08, 1.864918E-08, 1.891541E-08, 1.917626E-08]
	sigmav[21, :] = [1.451860E-08, 1.497242E-08, 1.527959E-08, 1.546426E-08, 1.561405E-08, 1.576680E-08, 1.593562E-08,
	                 1.612336E-08, 1.632881E-08, 1.654938E-08, 1.678214E-08, 1.702432E-08, 1.727342E-08, 1.752728E-08,
	                 1.778403E-08, 1.804212E-08, 1.830022E-08, 1.855722E-08, 1.881221E-08, 1.906442E-08, 1.931321E-08,
	                 1.955809E-08, 1.979862E-08, 2.003447E-08, 2.026539E-08]
	sigmav[22, :] = [1.650291E-08, 1.686713E-08, 1.713763E-08, 1.728629E-08, 1.739698E-08, 1.750901E-08, 1.763681E-08,
	                 1.778395E-08, 1.794957E-08, 1.813118E-08, 1.832589E-08, 1.853088E-08, 1.874361E-08, 1.896183E-08,
	                 1.918367E-08, 1.940749E-08, 1.963195E-08, 1.985593E-08, 2.007847E-08, 2.029881E-08, 2.051630E-08,
	                 2.073043E-08, 2.094078E-08, 2.114701E-08, 2.134888E-08]
	sigmav[23, :] = [1.844105E-08, 1.870916E-08, 1.894764E-08, 1.906680E-08, 1.914388E-08, 1.921928E-08, 1.930896E-08,
	                 1.941750E-08, 1.954465E-08, 1.968827E-08, 1.984561E-08, 2.001395E-08, 2.019076E-08, 2.037381E-08,
	                 2.056121E-08, 2.075131E-08, 2.094275E-08, 2.113440E-08, 2.132529E-08, 2.151463E-08, 2.170179E-08,
	                 2.188624E-08, 2.206754E-08, 2.224538E-08, 2.241947E-08]
	sigmav[24, :] = [2.029623E-08, 2.046590E-08, 2.067908E-08, 2.077712E-08, 2.082796E-08, 2.087263E-08, 2.092877E-08,
	                 2.100230E-08, 2.109382E-08, 2.120173E-08, 2.132364E-08, 2.145700E-08, 2.159941E-08, 2.174871E-08,
	                 2.190303E-08, 2.206077E-08, 2.222055E-08, 2.238125E-08, 2.254190E-08, 2.270172E-08, 2.286004E-08,
	                 2.301634E-08, 2.317018E-08, 2.332122E-08, 2.346919E-08]
	sigmav[25, :] = [2.203863E-08, 2.211067E-08, 2.230632E-08, 2.239261E-08, 2.242566E-08, 2.244668E-08, 2.247509E-08,
	                 2.251836E-08, 2.257822E-08, 2.265380E-08, 2.274320E-08, 2.284419E-08, 2.295457E-08, 2.307234E-08,
	                 2.319570E-08, 2.332310E-08, 2.345322E-08, 2.358493E-08, 2.371728E-08, 2.384950E-08, 2.398091E-08,
	                 2.411100E-08, 2.423931E-08, 2.436549E-08, 2.448927E-08]
	sigmav[26, :] = [2.364574E-08, 2.362295E-08, 2.380891E-08, 2.389289E-08, 2.391698E-08, 2.392201E-08, 2.392918E-08,
	                 2.394772E-08, 2.398065E-08, 2.402803E-08, 2.408858E-08, 2.416051E-08, 2.424192E-08, 2.433099E-08,
	                 2.442607E-08, 2.452571E-08, 2.462863E-08, 2.473376E-08, 2.484017E-08, 2.494709E-08, 2.505388E-08,
	                 2.515999E-08, 2.526498E-08, 2.536850E-08, 2.547025E-08]
	sigmav[27, :] = [2.510197E-08, 2.498812E-08, 2.517148E-08, 2.526190E-08, 2.528554E-08, 2.528221E-08, 2.527486E-08,
	                 2.527453E-08, 2.528569E-08, 2.530945E-08, 2.534529E-08, 2.539194E-08, 2.544787E-08, 2.551151E-08,
	                 2.558141E-08, 2.565622E-08, 2.573477E-08, 2.581605E-08, 2.589916E-08, 2.598337E-08, 2.606804E-08,
	                 2.615263E-08, 2.623672E-08, 2.631992E-08, 2.640195E-08]
	sigmav[28, :] = [2.639787E-08, 2.619680E-08, 2.638327E-08, 2.648760E-08, 2.651843E-08, 2.651391E-08, 2.649852E-08,
	                 2.648514E-08, 2.647979E-08, 2.648470E-08, 2.650018E-08, 2.652556E-08, 2.655974E-08, 2.660147E-08,
	                 2.664950E-08, 2.670265E-08, 2.675987E-08, 2.682022E-08, 2.688286E-08, 2.694709E-08, 2.701229E-08,
	                 2.707795E-08, 2.714364E-08, 2.720899E-08, 2.727369E-08]
	sigmav[29, :] = [2.752897E-08, 2.724403E-08, 2.743759E-08, 2.756162E-08, 2.760601E-08, 2.760656E-08, 2.758904E-08,
	                 2.756811E-08, 2.755128E-08, 2.754200E-08, 2.754145E-08, 2.754960E-08, 2.756583E-08, 2.758923E-08,
	                 2.761879E-08, 2.765354E-08, 2.769254E-08, 2.773495E-08, 2.778000E-08, 2.782703E-08, 2.787547E-08,
	                 2.792481E-08, 2.797464E-08, 2.802460E-08, 2.807438E-08]
	sigmav[30, :] = [2.849466E-08, 2.812837E-08, 2.833109E-08, 2.847871E-08, 2.854148E-08, 2.855224E-08, 2.853767E-08,
	                 2.851405E-08, 2.849038E-08, 2.847127E-08, 2.845879E-08, 2.845360E-08, 2.845556E-08, 2.846412E-08,
	                 2.847857E-08, 2.849810E-08, 2.852195E-08, 2.854935E-08, 2.857965E-08, 2.861224E-08, 2.864656E-08,
	                 2.868216E-08, 2.871862E-08, 2.875560E-08, 2.879279E-08]
	sigmav[31, :] = [2.929700E-08, 2.885105E-08, 2.906315E-08, 2.923627E-08, 2.932061E-08, 2.934539E-08, 2.933784E-08,
	                 2.931564E-08, 2.928914E-08, 2.926408E-08, 2.924342E-08, 2.922847E-08, 2.921958E-08, 2.921660E-08,
	                 2.921907E-08, 2.922642E-08, 2.923802E-08, 2.925324E-08, 2.927150E-08, 2.929225E-08, 2.931499E-08,
	                 2.933928E-08, 2.936474E-08, 2.939104E-08, 2.941787E-08]
	sigmav[32, :] = [2.993969E-08, 2.941516E-08, 2.963518E-08, 2.983389E-08, 2.994132E-08, 2.998258E-08, 2.998502E-08,
	                 2.996745E-08, 2.994142E-08, 2.991373E-08, 2.988813E-08, 2.986658E-08, 2.984993E-08, 2.983837E-08,
	                 2.983175E-08, 2.982969E-08, 2.983172E-08, 2.983734E-08, 2.984605E-08, 2.985738E-08, 2.987087E-08,
	                 2.988612E-08, 2.990276E-08, 2.992048E-08, 2.993900E-08]
	sigmav[33, :] = [3.042728E-08, 2.982501E-08, 3.005019E-08, 3.027290E-08, 3.040343E-08, 3.046230E-08, 3.047659E-08,
	                 3.046594E-08, 3.044293E-08, 3.041525E-08, 3.038741E-08, 3.036195E-08, 3.034017E-08, 3.032263E-08,
	                 3.030943E-08, 3.030041E-08, 3.029525E-08, 3.029358E-08, 3.029498E-08, 3.029904E-08, 3.030537E-08,
	                 3.031359E-08, 3.032338E-08, 3.033443E-08, 3.034646E-08]
	sigmav[34, :] = [3.076456E-08, 3.008570E-08, 3.031232E-08, 3.055610E-08, 3.070835E-08, 3.078477E-08, 3.081173E-08,
	                 3.080941E-08, 3.079118E-08, 3.076549E-08, 3.073751E-08, 3.071030E-08, 3.068558E-08, 3.066422E-08,
	                 3.064658E-08, 3.063269E-08, 3.062238E-08, 3.061540E-08, 3.061141E-08, 3.061007E-08, 3.061104E-08,
	                 3.061400E-08, 3.061862E-08, 3.062463E-08, 3.063177E-08]
	sigmav[35, :] = [3.095616E-08, 3.020276E-08, 3.042660E-08, 3.068747E-08, 3.085899E-08, 3.095183E-08, 3.099135E-08,
	                 3.099792E-08, 3.098550E-08, 3.096315E-08, 3.093657E-08, 3.090926E-08, 3.088329E-08, 3.085985E-08,
	                 3.083949E-08, 3.082244E-08, 3.080866E-08, 3.079800E-08, 3.079023E-08, 3.078505E-08, 3.078218E-08,
	                 3.078132E-08, 3.078220E-08, 3.078454E-08, 3.078811E-08]
	sigmav[36, :] = [3.100649E-08, 3.018204E-08, 3.039880E-08, 3.067211E-08, 3.085957E-08, 3.096688E-08, 3.101803E-08,
	                 3.103335E-08, 3.102714E-08, 3.100887E-08, 3.098467E-08, 3.095841E-08, 3.093246E-08, 3.090823E-08,
	                 3.088649E-08, 3.086761E-08, 3.085169E-08, 3.083866E-08, 3.082837E-08, 3.082059E-08, 3.081508E-08,
	                 3.081159E-08, 3.080985E-08, 3.080963E-08, 3.081070E-08]
	sigmav[37, :] = [3.091969E-08, 3.002966E-08, 3.023533E-08, 3.051609E-08, 3.071563E-08, 3.083479E-08, 3.089605E-08,
	                 3.091938E-08, 3.091920E-08, 3.090526E-08, 3.088397E-08, 3.085946E-08, 3.083436E-08, 3.081026E-08,
	                 3.078810E-08, 3.076838E-08, 3.075130E-08, 3.073689E-08, 3.072504E-08, 3.071561E-08, 3.070839E-08,
	                 3.070315E-08, 3.069966E-08, 3.069771E-08, 3.069708E-08]
	sigmav[38, :] = [3.069987E-08, 2.975208E-08, 2.994332E-08, 3.022651E-08, 3.043393E-08, 3.056195E-08, 3.063133E-08,
	                 3.066148E-08, 3.066673E-08, 3.065693E-08, 3.063867E-08, 3.061626E-08, 3.059249E-08, 3.056910E-08,
	                 3.054716E-08, 3.052727E-08, 3.050972E-08, 3.049461E-08, 3.048191E-08, 3.047151E-08, 3.046322E-08,
	                 3.045687E-08, 3.045226E-08, 3.044917E-08, 3.044742E-08]
	sigmav[39, :] = [3.035144E-08, 2.935629E-08, 2.953062E-08, 2.981146E-08, 3.002252E-08, 3.015618E-08, 3.023142E-08,
	                 3.026690E-08, 3.027666E-08, 3.027051E-08, 3.025510E-08, 3.023482E-08, 3.021257E-08, 3.019019E-08,
	                 3.016884E-08, 3.014920E-08, 3.013162E-08, 3.011628E-08, 3.010317E-08, 3.009223E-08, 3.008332E-08,
	                 3.007629E-08, 3.007095E-08, 3.006712E-08, 3.006461E-08]
	sigmav[40, :] = [2.987942E-08, 2.884992E-08, 2.900590E-08, 2.928008E-08, 2.949068E-08, 2.962674E-08, 2.970547E-08,
	                 2.974460E-08, 2.975776E-08, 2.975457E-08, 2.974160E-08, 2.972328E-08, 2.970253E-08, 2.968125E-08,
	                 2.966065E-08, 2.964146E-08, 2.962410E-08, 2.960877E-08, 2.959553E-08, 2.958432E-08, 2.957505E-08,
	                 2.956758E-08, 2.956175E-08, 2.955739E-08, 2.955434E-08]
	sigmav[41, :] = [2.928988E-08, 2.824145E-08, 2.837876E-08, 2.864255E-08, 2.884890E-08, 2.898426E-08, 2.906411E-08,
	                 2.910519E-08, 2.912054E-08, 2.911948E-08, 2.910844E-08, 2.909175E-08, 2.907233E-08, 2.905209E-08,
	                 2.903226E-08, 2.901360E-08, 2.899656E-08, 2.898137E-08, 2.896811E-08, 2.895676E-08, 2.894725E-08,
	                 2.893946E-08, 2.893326E-08, 2.892848E-08, 2.892497E-08]
	sigmav[42, :] = [2.859029E-08, 2.754034E-08, 2.765972E-08, 2.791007E-08, 2.810881E-08, 2.824061E-08, 2.831937E-08,
	                 2.836073E-08, 2.837707E-08, 2.837729E-08, 2.836758E-08, 2.835214E-08, 2.833381E-08, 2.831447E-08,
	                 2.829534E-08, 2.827719E-08, 2.826048E-08, 2.824545E-08, 2.823222E-08, 2.822078E-08, 2.821107E-08,
	                 2.820301E-08, 2.819645E-08, 2.819127E-08, 2.818732E-08]
	sigmav[43, :] = [2.778976E-08, 2.675711E-08, 2.686022E-08, 2.709480E-08, 2.728305E-08, 2.740877E-08, 2.748442E-08,
	                 2.752454E-08, 2.754074E-08, 2.754143E-08, 2.753247E-08, 2.751788E-08, 2.750037E-08, 2.748175E-08,
	                 2.746321E-08, 2.744551E-08, 2.742910E-08, 2.741424E-08, 2.740103E-08, 2.738950E-08, 2.737961E-08,
	                 2.737125E-08, 2.736434E-08, 2.735874E-08, 2.735432E-08]
	sigmav[44, :] = [2.689921E-08, 2.590330E-08, 2.599254E-08, 2.620968E-08, 2.638510E-08, 2.650259E-08, 2.657338E-08,
	                 2.661092E-08, 2.662598E-08, 2.662640E-08, 2.661767E-08, 2.660356E-08, 2.658663E-08, 2.656857E-08,
	                 2.655053E-08, 2.653322E-08, 2.651708E-08, 2.650236E-08, 2.648918E-08, 2.647756E-08, 2.646747E-08,
	                 2.645883E-08, 2.645155E-08, 2.644551E-08, 2.644059E-08]
	sigmav[45, :] = [2.593133E-08, 2.499139E-08, 2.506964E-08, 2.526828E-08, 2.542902E-08, 2.553652E-08, 2.560101E-08,
	                 2.563483E-08, 2.564790E-08, 2.564744E-08, 2.563851E-08, 2.562459E-08, 2.560803E-08, 2.559042E-08,
	                 2.557281E-08, 2.555586E-08, 2.553999E-08, 2.552543E-08, 2.551229E-08, 2.550060E-08, 2.549034E-08,
	                 2.548143E-08, 2.547379E-08, 2.546731E-08, 2.546190E-08]
	sigmav[46, :] = [2.490049E-08, 2.403460E-08, 2.410494E-08, 2.428448E-08, 2.442917E-08, 2.452530E-08, 2.458234E-08,
	                 2.461154E-08, 2.462196E-08, 2.462013E-08, 2.461067E-08, 2.459671E-08, 2.458040E-08, 2.456317E-08,
	                 2.454597E-08, 2.452940E-08, 2.451384E-08, 2.449950E-08, 2.448647E-08, 2.447478E-08, 2.446440E-08,
	                 2.445529E-08, 2.444734E-08, 2.444048E-08, 2.443461E-08]
	sigmav[47, :] = [2.382233E-08, 2.304659E-08, 2.311201E-08, 2.327224E-08, 2.339989E-08, 2.348363E-08, 2.353234E-08,
	                 2.355624E-08, 2.356349E-08, 2.355995E-08, 2.354973E-08, 2.353561E-08, 2.351950E-08, 2.350265E-08,
	                 2.348591E-08, 2.346980E-08, 2.345464E-08, 2.344061E-08, 2.342781E-08, 2.341623E-08, 2.340587E-08,
	                 2.339665E-08, 2.338851E-08, 2.338137E-08, 2.337513E-08]
	sigmav[48, :] = [2.271334E-08, 2.204113E-08, 2.210427E-08, 2.224519E-08, 2.235515E-08, 2.242578E-08, 2.246553E-08,
	                 2.248365E-08, 2.248739E-08, 2.248191E-08, 2.247080E-08, 2.245647E-08, 2.244057E-08, 2.242417E-08,
	                 2.240799E-08, 2.239246E-08, 2.237785E-08, 2.236430E-08, 2.235188E-08, 2.234059E-08, 2.233039E-08,
	                 2.232125E-08, 2.231307E-08, 2.230580E-08, 2.229934E-08]
	sigmav[49, :] = [2.159030E-08, 2.103168E-08, 2.109461E-08, 2.121632E-08, 2.130821E-08, 2.136525E-08, 2.139562E-08,
	                 2.140765E-08, 2.140767E-08, 2.140014E-08, 2.138809E-08, 2.137358E-08, 2.135797E-08, 2.134214E-08,
	                 2.132665E-08, 2.131187E-08, 2.129800E-08, 2.128513E-08, 2.127330E-08, 2.126250E-08, 2.125269E-08,
	                 2.124382E-08, 2.123582E-08, 2.122862E-08, 2.122214E-08]
	sigmav[50, :] = [2.123112E-08, 2.071033E-08, 2.077350E-08, 2.088911E-08, 2.097516E-08, 2.102779E-08, 2.105512E-08,
	                 2.106516E-08, 2.106396E-08, 2.105576E-08, 2.104342E-08, 2.102887E-08, 2.101337E-08, 2.099775E-08,
	                 2.098253E-08, 2.096803E-08, 2.095443E-08, 2.094182E-08, 2.093023E-08, 2.091964E-08, 2.091001E-08,
	                 2.090128E-08, 2.089338E-08, 2.088625E-08, 2.087981E-08]
	sigmav[51, :] = [1.985712E-08, 1.948607E-08, 1.955100E-08, 1.964310E-08, 1.970654E-08, 1.974201E-08, 1.975744E-08,
	                 1.975972E-08, 1.975381E-08, 1.974304E-08, 1.972963E-08, 1.971500E-08, 1.970007E-08, 1.968542E-08,
	                 1.967138E-08, 1.965817E-08, 1.964586E-08, 1.963449E-08, 1.962405E-08, 1.961450E-08, 1.960578E-08,
	                 1.959783E-08, 1.959059E-08, 1.958398E-08, 1.957794E-08]
	sigmav[52, :] = [1.852222E-08, 1.830152E-08, 1.836822E-08, 1.843679E-08, 1.847758E-08, 1.849584E-08, 1.849934E-08,
	                 1.849388E-08, 1.848330E-08, 1.847007E-08, 1.845572E-08, 1.844120E-08, 1.842706E-08, 1.841364E-08,
	                 1.840108E-08, 1.838947E-08, 1.837879E-08, 1.836902E-08, 1.836011E-08, 1.835198E-08, 1.834456E-08,
	                 1.833779E-08, 1.833160E-08, 1.832590E-08, 1.832066E-08]
	sigmav[53, :] = [1.725005E-08, 1.717343E-08, 1.724031E-08, 1.728511E-08, 1.730334E-08, 1.730459E-08, 1.729636E-08,
	                 1.728332E-08, 1.726824E-08, 1.725271E-08, 1.723761E-08, 1.722340E-08, 1.721028E-08, 1.719832E-08,
	                 1.718751E-08, 1.717778E-08, 1.716904E-08, 1.716120E-08, 1.715415E-08, 1.714779E-08, 1.714204E-08,
	                 1.713682E-08, 1.713205E-08, 1.712766E-08, 1.712359E-08]
	sigmav[54, :] = [1.605878E-08, 1.611388E-08, 1.617790E-08, 1.619850E-08, 1.619446E-08, 1.617913E-08, 1.615955E-08,
	                 1.613927E-08, 1.611997E-08, 1.610237E-08, 1.608672E-08, 1.607300E-08, 1.606109E-08, 1.605080E-08,
	                 1.604193E-08, 1.603431E-08, 1.602774E-08, 1.602207E-08, 1.601714E-08, 1.601284E-08, 1.600905E-08,
	                 1.600568E-08, 1.600264E-08, 1.599987E-08, 1.599731E-08]
	sigmav[55, :] = [1.496022E-08, 1.512956E-08, 1.518658E-08, 1.518255E-08, 1.515679E-08, 1.512559E-08, 1.509532E-08,
	                 1.506831E-08, 1.504517E-08, 1.502579E-08, 1.500981E-08, 1.499676E-08, 1.498619E-08, 1.497769E-08,
	                 1.497090E-08, 1.496551E-08, 1.496124E-08, 1.495788E-08, 1.495524E-08, 1.495316E-08, 1.495151E-08,
	                 1.495018E-08, 1.494909E-08, 1.494816E-08, 1.494733E-08]
	sigmav[56, :] = [1.395925E-08, 1.422127E-08, 1.426650E-08, 1.423766E-08, 1.419120E-08, 1.414527E-08, 1.410529E-08,
	                 1.407232E-08, 1.404589E-08, 1.402511E-08, 1.400905E-08, 1.399683E-08, 1.398770E-08, 1.398105E-08,
	                 1.397635E-08, 1.397320E-08, 1.397124E-08, 1.397020E-08, 1.396985E-08, 1.397002E-08, 1.397054E-08,
	                 1.397131E-08, 1.397223E-08, 1.397322E-08, 1.397421E-08]
	sigmav[57, :] = [1.305328E-08, 1.338337E-08, 1.341193E-08, 1.335881E-08, 1.329340E-08, 1.323454E-08, 1.318633E-08,
	                 1.314849E-08, 1.311956E-08, 1.309792E-08, 1.308210E-08, 1.307087E-08, 1.306324E-08, 1.305841E-08,
	                 1.305573E-08, 1.305469E-08, 1.305490E-08, 1.305604E-08, 1.305783E-08, 1.306009E-08, 1.306265E-08,
	                 1.306539E-08, 1.306820E-08, 1.307100E-08, 1.307373E-08]
	sigmav[58, :] = [1.223180E-08, 1.260320E-08, 1.261092E-08, 1.253531E-08, 1.245387E-08, 1.238478E-08, 1.233049E-08,
	                 1.228941E-08, 1.225912E-08, 1.223736E-08, 1.222223E-08, 1.221222E-08, 1.220613E-08, 1.220303E-08,
	                 1.220218E-08, 1.220302E-08, 1.220510E-08, 1.220807E-08, 1.221167E-08, 1.221568E-08, 1.221992E-08,
	                 1.222428E-08, 1.222865E-08, 1.223295E-08, 1.223712E-08]
	sigmav[59, :] = [1.147574E-08, 1.186050E-08, 1.184490E-08, 1.175057E-08, 1.165770E-08, 1.158235E-08, 1.152511E-08,
	                 1.148309E-08, 1.145307E-08, 1.143227E-08, 1.141849E-08, 1.141002E-08, 1.140553E-08, 1.140403E-08,
	                 1.140473E-08, 1.140705E-08, 1.141054E-08, 1.141484E-08, 1.141967E-08, 1.142484E-08, 1.143018E-08,
	                 1.143558E-08, 1.144092E-08, 1.144615E-08, 1.145121E-08]
	return eb_val, te_val, sigmav


def tabulated_eimpact_ionization(Eb, Te, plot=False):
	# need reference.
	# convert from keV to eV
	if type(Eb) in [float, np.float64, np.float32]:
		if Eb < 100:
			print('interpreting {Eb} as {Eb}keV')
			Eb *= 1000.
		if Te < 1:
			print(f'interpreting {Te} as {Te}keV')
			Te *= 1000.
		
		eb_val, te_val, sigmav = eimpact_data()
		
		if Eb < 1000.:
			print('Eb < 1 keV, using EI cross section for Ti = 1 keV.')
			Eb = 1000.
		if Eb > 25000.:
			print('Eb > 25keV, out of range of available EI data')
			print('using Eb=25000')
			eb = 25000.
		if Te > 5000:
			print('Te > 5000eV, out of range')
			return 0
		
		ik = min(np.where(Eb <= eb_val)[0])
		eb_h = eb_val[ik]
		eb_l = eb_val[ik - 1]
		sigma_v_of_t_h = sigmav[:, ik]
		sigma_v_of_t_l = sigmav[:, ik - 1]
		sv_h = np.interp(Te, te_val, sigma_v_of_t_h)
		sv_l = np.interp(Te, te_val, sigma_v_of_t_l)
		# sv_h = interpol(sigma_v_of_t_h, te_val, te)
		# sv_l = interpol(sigma_v_of_t_l, te_val, te)
		dsv_de = (sv_h - sv_l) / (eb_h - eb_l)
		sigma_v_out = dsv_de * (Eb - eb_l) + sv_l
		
		if plot:  # debugging
			plt.loglog(te_val, sigma_v_of_t_h, label=f'$E_b$ = {eb_h / 1000.}keV')
			plt.plot(te_val, sigma_v_of_t_l, label=f'$E_b$ = {eb_l / 1000.}keV')
			plt.plot(Te, sigma_v_out, 'rs')
			plt.xlabel('$T_e$ (eV)')
			plt.ylabel('$<\sigma v> cm^{-3}/s$')
			plt.legend()
			plt.show()
		
		return sigma_v_out
	elif type(Eb) is np.ndarray or type(Eb) is list:
		val_arr = [tabulated_eimpact_ionization(Ebval, Te) for Ebval in Eb]
		return np.array(val_arr)
	else:
		raise TypeError


def tabulated_i_ch_ex_ionization(Eb, mb, retrn='sigmav'):
	if retrn not in ['sigmav', 'sigma']:
		raise ValueError('retrn keyword must be "sigmav" or "sigma"')
	if type(Eb) in [float, np.float64, np.float32]:
		if Eb < 100:
			print(f'interpreting {Eb} as {Eb}keV')
			Eb *= 1000.  # kev to ev  SJE 5-8-2014
		
		energy, sigma = i_ch_ex_data()
		mass = mi * mb
		velocity = np.sqrt(2. * qe * energy / mass)
		velocity = velocity * 100.  # [cm/s]
		sigmav = sigma * velocity
		if retrn == 'sigmav':
			value = np.interp(Eb / mb, energy, sigmav)
		elif retrn == 'sigma':
			value = np.interp(Eb / mb, energy, sigma)
		return value
	elif type(Eb) is np.ndarray or type(Eb) is list:
		val_arr = [tabulated_i_ch_ex_ionization(Ebval, mb, retrn=retrn) for Ebval in Eb]
		return np.array(val_arr)
	else:
		raise TypeError


def tabulated_iimpact_ionization(Eb, mb, retrn='sigmav'):
	if retrn not in ['sigmav', 'sigma']:
		raise ValueError('retrn keyword must be "sigmav" or "sigma"')
	if type(Eb) in [float, np.float64, np.float32]:
		if Eb < 100:
			print(f'interpreting {Eb} as {Eb}keV')
			Eb *= 1000.  # kev to ev  SJE 5-8-2014
		
		energy, sigma = iimpact_data()
		mass = mi * mb
		
		velocity = np.sqrt(2. * qe * energy / mass)
		velocity = velocity * 100.  # cm/s
		sigmav = sigma * velocity
		if retrn == 'sigmav':
			value = np.interp(Eb / mb, energy, sigmav)  # interpol(sigmav,energy,Eb/mb)
		elif retrn == 'sigma':
			value = np.interp(Eb / mb, energy, sigma)
		return value
	elif type(Eb) is np.ndarray or type(Eb) is list:
		val_arr = [tabulated_iimpact_ionization(Ebval, mb, retrn=retrn) for Ebval in Eb]
		return np.array(val_arr)
	else:
		raise TypeError


def plot_eimpact_rate_coeffs():
	# evals [eV]
	# tevals [eV]
	# sigvvals [cm^3/s] (tevals,evals)
	evals, tevals, sigvvals = eimpact_data()
	fig, ax = plt.subplots()
	for ev in evals[::4]:  # every 4th eval
		(eactual, ie) = closest(evals, ev)
		ax.plot(tevals, sigvvals[:, ie] * 1.e-6, label=f'{eactual:.1f}')
	ax.set_xlabel('$T_e$ (eV)')
	ax.set_ylabel('$<\sigma v> (m^3/s)$')
	ax.set_xscale('log')
	ax.set_yscale('log')
	ax.set_xlim((1, 1.e5))
	ax.set_ylim(bottom=1.e-17)
	ax.legend(title='E_H')
	plt.tight_layout()


def plot_rate_coeffs():
	fig, ax = plt.subplots()
	ecx, sigcx = i_ch_ex_data()
	velocity = np.sqrt(2. * qe * ecx / mi) * 100.  # cm/s
	sigvcx = sigcx * velocity
	ax.plot(ecx, sigvcx * 1.e-6, 'o-', label='CX')
	eii, sigii = iimpact_data()
	velocity = np.sqrt(2. * qe * eii / mi) * 100.  # cm/s
	sigvii = sigii * velocity
	ax.plot(eii, sigvii * 1.e-6, 'o-', label='II')
	evals, tevals, sigvvals = eimpact_data()
	(eactual, ie) = closest(evals, 1000)  # find closest value to 1000 eV (lowest in array)
	ax.plot(tevals, sigvvals[:, ie] * 1.e-6, 'o-', label='EI')
	print(f'Plotting data for E_H={eactual:.1f} eV')
	ax.set_xlabel('E (eV)')
	ax.set_ylabel('$<\sigma v> (m^3/s)$')
	ax.set_xscale('log')
	ax.set_yscale('log')
	ax.set_xlim((1, 1.e5))
	ax.set_ylim(bottom=1.e-17)
	ax.legend()
	plt.tight_layout()


def mean_free_path():
	# T_e = 200 eV
	# n_e = 1&2e13 cm^-3
	ecx, sigcx = i_ch_ex_data()  # [eV], [cm^2]
	eii, sigii = iimpact_data()  # [eV], [cm^2]
	evals, tevals, sigvvals = eimpact_data()
	ei_sigv = sigvvals[:, 0]  # E_H=1000 eV (lowest value available)
	vel_e = np.sqrt(2. * qe * tevals / me) * 100.  # cm/s
	vel_i = np.sqrt(2. * qe * tevals / mi) * 100.  # cm/s
	
	mfp_fig, (mfp_ax, mfp_ax2) = plt.subplots(ncols=2, figsize=(10, 4))
	mrk = ['o', 's']
	clrs = plt.rcParams['axes.prop_cycle'].by_key()['color']
	for i, ne in enumerate([1.e13, 2.e13]):
		cx_mfp = 1. / (sigcx * ne)
		mfp_ax.plot(ecx, cx_mfp, mrk[i], ls='-', c=clrs[0], markevery=2)
		ii_mfp = 1. / (sigii * ne)
		mfp_ax.plot(eii, ii_mfp, mrk[i], ls='-', c=clrs[1], markevery=5)
		sigei = ei_sigv / vel_i
		ei_mfp_vi = 1. / (sigei * ne)  # electron-ion impact mean free path using velocity of ion
		mfp_ax.plot(tevals, ei_mfp_vi, mrk[i], ls='-', c=clrs[2], markevery=5)
		sigcx2 = np.interp(tevals, ecx, sigcx)
		sigtot = sigcx2 + sigei
		mfptot = 1. / (sigtot * ne)
		mfp_ax.plot(tevals, mfptot, '--', marker=mrk[i], c=clrs[3], markevery=5)
		ei_frac = sigei / sigtot  # Correct iff ne=ni
		mfp_ax2.plot(tevals, ei_frac, 'k-')
	mfp_ax.plot(np.nan, np.nan, 'ko-', label='ne=1.e19')
	mfp_ax.plot(np.nan, np.nan, 'ks-', label='ne=2.e19')
	mfp_ax.plot(np.nan, np.nan, '-', c=clrs[0], label='CX')
	mfp_ax.plot(np.nan, np.nan, '-', c=clrs[1], label='II')
	mfp_ax.plot(np.nan, np.nan, '-', c=clrs[2], label='EI')
	mfp_ax.plot(np.nan, np.nan, '--', c=clrs[3], label='CX+EI')
	mfp_ax.set_ylabel('mfp (cm)')
	mfp_ax.set_yscale('log')
	for ax in [mfp_ax, mfp_ax2]:
		ax.set_xlim((1, 1.e5))
		ax.set_xscale('log')
		# ax.set_yscale('log')
		ax.set_xlabel('E (eV)')
	mfp_ax.set_ylim(top=1.e3)
	mfp_ax.legend()
	mfp_ax2.set_ylabel('EI fraction')
	plt.tight_layout()


def adas_cx_cross_sections():
	def idl_dig():
		energy = np.array(
			[0.12, 0.2, 0.4, 0.7, 1.0, 2.0, 4.0, 7.0, 10, 20, 40, 70, 100, 200, 400, 700, 1000, 2000, 4000, 7000,
			 10000, 20000, 40000, 70000, 100000, 200000, 400000, 630000])
		sigma = np.array(
			[496, 470, 445, 424, 410, 383, 358, 333, 317, 293, 270, 254, 244, 222, 203, 188, 171, 144, 120, 94.2, 77.5,
			 44.5, 16.7, 3.77, 1.01, 0.0609, 0.00176, 0.000135])
		sigma = sigma * 1.e-17
		velocity = np.sqrt(2. * qe * energy / mi) * 100.  # cm/s
		sigv = sigma * velocity
		return energy, sigma, sigv
	
	def file_dig(which=1):
		# if which == 1:
		# 	fn = 'qex#he0_1s-s_kvi#h1'
		# 	energies = [1.00, 2.00, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 6.50, 7.00, 8.00, 9.00, 10.00, 12.00,
		# 	            15.00, 17.00, 20.00, 25.00, 30.00, 40.00, 50.00, 60.00, 80.00, 100.00, 120.00,
		# 	            150.00]  # [kev/amu]
		# 	cx = [2.07E-20, 1.28E-19, 3.29E-19, 4.84E-19, 6.93E-19, 9.85E-19, 1.40E-18, 2.02E-18, 2.51E-18, 3.18E-18,
		# 	      3.86E-18, 5.12E-18, 6.09E-18, 6.72E-18, 7.84E-18, 9.63E-18, 1.03E-17, 1.13E-17, 1.28E-17, 1.44E-17,
		# 	      1.64E-17, 1.90E-17, 2.13E-17, 2.27E-17, 2.41E-17, 2.34E-17, 2.22E-17]  # [cm^2]
		# 	return fn, energies, cx
		# elif which == 2:
		# 	fn = 'qcx#he0_kvi#h1'
		# 	energies = [0.3, 0.5, 0.7, 1.0, 2.0, 3.0, 5., 7., 10., 20., 30., 50., 70., 100., 200., 300., 500.]
		# 	cx = [1.00E-20, 4.50e-20, 1.10e-19, 3.10e-19, 2.28e-18, 7.60e-18, 3.50e-17, 7.00e-17, 1.14e-16, 1.78e-16,
		# 	      1.70e-16, 1.07e-16, 6.20e-17, 2.70e-17, 3.30e-18, 8.20e-19, 8.70e-20]
		# 	return fn, energies, cx
		if which == 1:
			fn = 'qcx#h0_e2s#h1'
			energies = np.array(
				[1.00, 1.50, 2.00, 3.00, 5.00, 7.00, 10.00, 15.00, 20.00, 30.00, 50.00, 70.00, 100.00, 150.00,
				 200.00, 300.00, 500.00, 700.00])
			cx = np.array(
				[7.52e-15, 7.60e-15, 7.60e-15, 7.60e-15, 7.49e-15, 7.20e-15, 6.80e-15, 6.05e-15, 5.36e-15, 3.44e-15,
				 1.15e-15, 4.80e-16, 1.50e-16, 5.18e-17, 2.05e-17, 4.41e-18, 4.62e-19, 8.97e-20])
			velocity = np.sqrt(2. * qe * energies / mi) * 100.  # cm/s
			sigv = cx * velocity
			return fn, energies, cx, sigv
		elif which == 2:
			fn = 'qcx#h0_ory#h1'
			energies = np.array([10.00, 50.00, 100.00, 200.00, 300.00, 500.00, 1000.00])
			cx = np.array([7.95e-16, 9.61e-17, 1.54e-17, 1.29e-18, 2.35e-19, 2.20e-20, 6.45e-22])
			velocity = np.sqrt(2. * qe * energies / mi) * 100.  # cm/s
			sigv = cx * velocity
			return fn, energies, cx, sigv
		elif which == 3:
			fn = 'qcx#h0_e2p#h1'
			energies = np.array(
				[1.00, 1.50, 2.00, 3.00, 5.00, 7.00, 10.00, 15.00, 20.00, 30.00, 50.00, 70.00, 100.00, 150.00,
				 200.00, 300.00, 500.00, 700.00])
			cx = np.array(
				[7.52e-15, 7.60e-15, 7.60e-15, 7.60e-15, 7.49e-15, 7.20e-15, 6.80e-15, 6.05e-15, 5.36e-15, 3.44e-15,
				 1.15e-15, 4.80e-16, 1.63e-16, 3.07e-17, 8.24e-18, 1.05e-18, 6.12e-20, 8.50e-21])
			velocity = np.sqrt(2. * qe * energies / mi) * 100.  # cm/s
			sigv = cx * velocity
			return fn, energies, cx, sigv
		elif which == 4:
			fn = 'qcx#h0_old#h1'
			energies = np.array(
				[1.00, 1.50, 2.00, 3.00, 5.00, 7.00, 10.00, 15.00, 20.00, 30.00, 40.00, 50.00, 60.00, 70.00,
				 100.00, 150.00, 200.00, 300.00, 500.00, 700.00, 1000.00])
			cx = np.array(
				[1.59e-15, 1.46e-15, 1.34e-15, 1.20e-15, 1.04e-15, 9.40e-16, 8.20e-16, 6.43e-16, 5.00e-16, 2.95e-16,
				 1.74e-16, 1.04e-16, 6.29e-17, 3.95e-17, 1.24e-17, 2.78e-18, 7.30e-19, 1.11e-19, 1.00e-20, 2.10e-21,
				 3.80e-22])
			velocity = np.sqrt(2. * qe * energies / mi) * 100.  # cm/s
			sigv = cx * velocity
			return fn, energies, cx, sigv
		elif which == 5:
			fn = 'qcx#h0_ex3#h1'
			energies = np.array(
				[1.00, 1.50, 2.00, 3.00, 5.00, 7.00, 10.00, 15.00, 20.00, 30.00, 50.00, 70.00, 100.00, 150.00,
				 200.00, 300.00, 500.00, 700.00])
			cx = np.array(
				[3.81e-14, 3.85e-14, 3.85e-14, 3.85e-14, 3.79e-14, 3.65e-14, 3.44e-14, 3.06e-14, 2.71e-14, 1.74e-14,
				 5.83e-15, 2.43e-15, 8.10e-16, 1.82e-16, 5.83e-17, 9.56e-18, 8.18e-19, 1.46e-19])
			velocity = np.sqrt(2. * qe * energies / mi) * 100.  # cm/s
			sigv = cx * velocity
			return fn, energies, cx, sigv
	
	# elif which == 8:
	# 	fn = 'qex#li0_2s_kvi#h1'
	# 	energies = [1.00, 1.50, 2.00, 3.00, 4.00, 6.00, 8.00, 10.00, 15.00, 20.00, 25.00]
	# 	cx = [1.18E-15, 2.23E-15, 3.00E-15, 3.89E-15, 4.23E-15, 4.64E-15, 4.90E-15, 5.10E-15, 5.06E-15, 4.74E-15,
	# 	      4.32E-15]
	# 	return fn, energies, cx
	
	fig, ax = plt.subplots()
	mrks = ['^', '<', 'v', '>', 'd']
	for wh in range(5):
		f, e, c, sigv = file_dig(which=wh + 1)
		ax.plot(e * 1.e3, sigv * 1.e-6, '-', marker=mrks[wh], label=f)
	e, c, sigv = idl_dig()
	ax.plot(e, sigv * 1.e-6, 'o-', label='idl')
	ax.legend()
	ax.set_ylabel('$<\sigma v> (m^3/s)$')
	ax.set_xlabel('$E (eV)$')
	ax.set_xscale('log')
	ax.set_yscale('log')
	ax.set_xlim((1, 1.e5))
	plt.show()


def fueling_vs_beam_energy():
	ebeam = np.arange(10, 25, 1) * 1000.
	sigv_ii = np.zeros_like(ebeam)
	sigv_ie = np.zeros_like(ebeam)
	sigv_cx = np.zeros_like(ebeam)
	
	for i, eb in enumerate(ebeam):
		sigv_ii[i] = tabulated_iimpact_ionization(eb, 1.)
		sigv_ie[i] = tabulated_eimpact_ionization(eb, 100.)
		sigv_cx[i] = tabulated_i_ch_ex_ionization(eb, 1.)
	fig, (ax1, ax2) = plt.subplots(ncols=2)
	ax1.plot(ebeam * 1.e-3, sigv_cx, 'o-', label='cx')
	ax1.plot(ebeam * 1.e-3, sigv_ie, 'o-', label='ie')
	ax1.plot(ebeam * 1.e-3, sigv_ii, 'o-', label='ii')
	ax1.legend()
	ax2.plot(ebeam * 1.e-3, (sigv_ii + sigv_ie) / (sigv_cx + sigv_ii + sigv_ie), 'o-')
	ax2.set_ylabel('fueling fraction')
	ax1.set_ylabel('cross section')
	ax1.set_xlabel('Ebeam (keV)')
	ax2.set_xlabel('Ebeam (keV)')
	plt.tight_layout()
	plt.show()


if __name__ == '__main__':
	# AGREES WITH IDL VERSION IN /home/mstfit/mstfit/user_defined_routines/
	# tabulated_i_ch_ex_ionization([16000.], 1.)
	# tabulated_eimpact_ionization(16000., 150, plot=True)
	# tabulated_iimpact_ionization([16000.], 1.)
	# fueling_vs_beam_energy()
	# adas_cx_cross_sections()
	plot_rate_coeffs()
	plot_eimpact_rate_coeffs()
	mean_free_path()
	plt.show()
